on:
  push:
    branches:
      - master

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        uses: docker://texlive/texlive:latest
        run: |
          zip --junk-paths my-artifact
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./my-artifact.zip
          asset_name: my-artifact.zip
          asset_content_type: application/zip
#curl -X POST \
#  https://api.github.com/repos/AlanVieyra333/curriculum-vitae/releases \
#  -H "Authorization: token c5f1ef50964aaf0a5d7f6ba52f54db659e992999" \
#  -d '{"tag_name":"v1.0"}'
#
#curl -X POST \
#  https://uploads.github.com/repos/AlanVieyra333/curriculum-vitae/releases/33771530/assets?name=CV_AFRV.pdf \
#  -H "Authorization: token c5f1ef50964aaf0a5d7f6ba52f54db659e992999" \
#  -H "Content-Type: application/pdf" \
#  --upload-file CV_AFRV.pdf
